import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Random;

public class BasicAlgSortTest {

    @Test
    public void testBubbleSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1};
        BasicAlgSort sorter = new BasicAlgSort(sourceArray);
        sorter.bubbleSortDesc();

        Integer[] expected = {10, 5, 4, 2, 1};
        assertThat(sorter.getArray()).containsExactly(expected);
    }

    @Test
    public void testSelectionSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1};
        BasicAlgSort sorter = new BasicAlgSort(sourceArray);
        sorter.selectionSortDesc();

        Integer[] expected = {10, 5, 4, 2, 1};
        assertThat(sorter.getArray()).containsExactly(expected);
    }

    @Test
    public void testInsertionSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1, 8, -5, 0};
        BasicAlgSort sorter = new BasicAlgSort(sourceArray);
        sorter.insertionSortDesc();

        Integer[] expected = {10, 8, 5, 4, 2, 1, 0, -5};
        assertThat(sorter.getArray()).containsExactly(expected);
    }

    @Test
    public void testRandomArraySortBubble() {
        Integer[] sourceArray = getRandomInteger(20);
        BasicAlgSort sorter = new BasicAlgSort(sourceArray.clone());

        sorter.bubbleSortDesc();
        Integer[] sorted = sorter.getArray();

        for (int i = 0; i < sorted.length - 1; i++) {
            assertThat(sorted[i]).isGreaterThanOrEqualTo(sorted[i + 1]);
        }
    }

    public static Integer[] getRandomInteger(int n) {
        Integer[] sourceArray = new Integer[n];
        for (int i = 0; i < n; i++) {
            sourceArray[i] = new Random().nextInt(201) - 100; // від -100 до 100
        }
        return sourceArray;
    }
}
    
