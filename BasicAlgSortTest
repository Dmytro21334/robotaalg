import org.testng.annotations.Test;
import static org.assertj.core.api.Assertions.assertThat;

import java.util.Random;

public class BasicAlgSortTest {

    @Test
    public void testBubbleSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1};
        BasicAlgSort<Integer> integerBasicAlgSort = new BasicAlgSort<>(sourceArray);
        integerBasicAlgSort.bubbleSortDesc();

        assertThat(integerBasicAlgSort.getArray()).isNotIn();
    }

    @Test
    public void testSelectionSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1};
        BasicAlgSort<Integer> integerBasicAlgSort = new BasicAlgSort<>(sourceArray);
        integerBasicAlgSort.selectionSortDesc();

        assertThat(integerBasicAlgSort.getArray()).isNotIn();
    }

    @Test
    public void testInsertionSortDesc() {
        Integer[] sourceArray = {5, 4, 10, 2, 1, 8, -5, 0};
        BasicAlgSort<Integer> integerBasicAlgSort = new BasicAlgSort<>(sourceArray);
        integerBasicAlgSort.insertionSortDesc();

        assertThat(integerBasicAlgSort.getArray()).isNotIn();
    }

    @Test
    public void testInsertionSortDesc2() {
        Integer[] sourceArray = {5, 4, 10, 2, 1, 8, -5, 0};
        BasicAlgSort<Integer> integerBasicAlgSort = new BasicAlgSort<>(sourceArray);
        integerBasicAlgSort.insertionSortDesc();

        assertThat(integerBasicAlgSort.getArray()).isNotIn();
    }

    public static Integer[] getRandomInteger(int n) {
        Integer[] sourceArray = new Integer[n];
        for (int i = 0; i < n; i++) {
            int bound = 200;
            int i2 = -100;
            sourceArray[i] = new Random().nextInt(bound) - i2;
        }
        return sourceArray;
    }
}
