import java.util.Arrays;
import java.util.Random;

public class BasicAlgSort<T extends Comparable<T>> {

    private T[] array;

    public BasicAlgSort(T[] array) {
        this.array = array;
    }

    public void bubbleSortDescending(int leftIndex, int rightIndex) {
        if (leftIndex < 0 || rightIndex >= array.length || leftIndex >= rightIndex) {
            throw new IllegalArgumentException("Invalid index range");
        }

        for (int i = leftIndex; i < rightIndex; i++) {
            for (int j = leftIndex; j < rightIndex - (i - leftIndex); j++) {
                if (array[j].compareTo(array[j + 1]) < 0) {
                    swap(j, j + 1);
                }
            }
        }
    }

    private void swap(int i, int j) {
        T temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public void printArray() {
        System.out.println(Arrays.toString(array));
    }

    public static Integer[] generateRandomArray(int size, int min, int max) {
        Random random = new Random();
        Integer[] array = new Integer[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(max - min + 1) + min;
        }
        return array;
    }

    public static void main(String[] args) {
        Integer[] numbers = generateRandomArray(10, -100, 100);
        BasicAlgSort<Integer> sorter = new BasicAlgSort<>(numbers);

        System.out.println("Before sorting:");
        sorter.printArray();

        sorter.bubbleSortDescending(2, 7);

        System.out.println("After sorting (descending) in range [2, 7]:");
        sorter.printArray();
    }
}
